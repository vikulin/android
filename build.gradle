import org.apache.tools.ant.taskdefs.condition.Os

allprojects {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
        google()
    }
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.4'
        classpath 'org.ajoberstar:gradle-git:0.2.3'
    }
}

ext {
    supportVersion = '25.0.1'
}

import org.ajoberstar.gradle.git.tasks.GitClone

task cloneCjdns(type: GitClone) {
    def destination = file("cjdns-src")

    uri = "https://github.com/vikulin/cjdns"
    // Use this repo until patch is merged in cjdelisle/cjdns
    destinationPath = destination
    bare = false
    enabled = !destination.exists() // Clone only on first run
}

task buildCjdns(type: Exec) {
    workingDir file("cjdns-src")
    commandLine file("cjdns-src/android_do")
}

task copyNativeArtifacts(type: Copy) {
    from 'cjdns-src/build_android/out/*'
    into 'src/main/assets/'
}


//tasks.withType(JavaCompile) {
//    compileTask -> compileTask.dependsOn cloneCjdns buildCjdns copyNativeArtifacts
//}


apply plugin: 'com.android.application'
apply plugin: 'checkstyle'

android {
    buildToolsVersion '27.0.3'
    compileSdkVersion 25

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0.0-SNAPSHOT"
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir 'src/main/libs'
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        disable 'InvalidPackage'
    }
}

android.defaultConfig.javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = true

//afterEvaluate {
//    if (COMPILE_CJDNS_NATIVE_ARTIFACTS.toBoolean()) {
//        android.applicationVariants.all { variant ->
//            variant.javaCompiler.dependsOn(cloneCjdns)
//        }
//    }
//}

//cloneCjdns.finalizedBy(buildCjdns)
//buildCjdns.finalizedBy(copyNativeArtifacts)

task ndkBuild(type: Exec) {
    def rootDir = project.rootDir
    def localProperties = new File(rootDir, "local.properties")
    Properties properties = new Properties()
    localProperties.withInputStream { instr ->
        properties.load(instr)
    }
    def ndkDir = properties.getProperty('ndk.dir')

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine ndkDir + '\\ndk-build.cmd',
                'NDK_LIBS_OUT=main/jniLibs',
                'NDK_PROJECT_PATH='+rootDir+'\\src',
                'APP_BUILD_SCRIPT=jni\\Android.mk',
                '-C',
                file('src').absolutePath
    } else {
        commandLine ndkDir + '/ndk-build',
                'NDK_LIBS_OUT=main/jniLibs',
                'NDK_PROJECT_PATH='+rootDir+'/src',
                'APP_BUILD_SCRIPT=jni/Android.mk',
                '-C',
                file('src').absolutePath
    }
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}

dependencies {
    compile "com.android.support:support-v4:$supportVersion"
    compile "com.android.support:appcompat-v7:$supportVersion"
    compile "com.android.support:cardview-v7:$supportVersion"
    compile "com.android.support:recyclerview-v7:$supportVersion"
    compile "com.android.support:preference-v7:$supportVersion"
    compile "com.android.support:preference-v14:$supportVersion"
    compile 'com.jakewharton:butterknife:6.0.0'
    compile 'com.joanzapata.android:android-iconify:1.0.9'
    compile('com.github.afollestad.material-dialogs:core:0.8.5.3@aar') {
        transitive = true
    }
    compile 'com.melnykov:floatingactionbutton:1.1.0'
    compile 'com.github.brnunes:swipeablerecyclerview:1.0.1'
    compile 'io.reactivex:rxjava:1.0.7'
    compile 'io.reactivex:rxandroid:0.24.0'
    compile 'com.squareup:otto:1.3.5'
    compile 'com.google.dagger:dagger:2.8'
    provided 'com.google.dagger:dagger-compiler:2.8'
}

if (project.hasProperty('keyAlias')) {
    android.signingConfigs.release.keyAlias = keyAlias
}
if (project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyPassword = keyPassword
}
if (project.hasProperty('storeFile')) {
    android.signingConfigs.release.storeFile = file(storeFile)
}
if (project.hasProperty('storePassword')) {
    android.signingConfigs.release.storePassword = storePassword
}
